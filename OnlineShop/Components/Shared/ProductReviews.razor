﻿@using OnlineShopUI.ViewModels
@inject HttpClient Http
@using OnlineShopUI.ViewModels

@if (isLoading)
{
    <p>Loading reviews...</p>
}
else if (Reviews is not null && Reviews.Any())
{
    <h4 class="mt-4">Customer Reviews</h4>
    @foreach (var review in Reviews)
    {
        <div class="border rounded p-3 mb-2">
            <strong>@review.ReviewerName</strong> - <span>Rating: @review.Rating/5</span>
            <p>@review.Comment</p>
        </div>
    }
}
else
{
    <p class="mt-3">No reviews yet. Be the first to leave one!</p>
}

@if (!showForm)
{
    <button class="btn btn-outline-primary mt-3" @onclick="() => showForm = true">Write a Review</button>
}
else
{
    <div class="mt-4">
        <h5>Add Your Review</h5>
        <EditForm Model="NewReview" OnValidSubmit="HandleSubmit">
            <DataAnnotationsValidator />
            <ValidationSummary />

            <div class="mb-2">
                <label>Name:</label>
                <InputText class="form-control" @bind-Value="NewReview.ReviewerName" />
            </div>

            <div class="mb-2">
                <label>Rating (1–5):</label>
                <InputNumber class="form-control" @bind-Value="NewReview.Rating" />
            </div>

            <div class="mb-2">
                <label>Comment:</label>
                <InputTextArea class="form-control" @bind-Value="NewReview.Comment" />
            </div>

            <button type="submit" class="btn btn-primary">Submit</button>
            <button type="button" class="btn btn-secondary ms-2" @onclick="() => showForm = false">Cancel</button>
        </EditForm>
    </div>
}

@code {
    [Parameter] public int ProductId { get; set; }

    private List<ReviewViewModel> Reviews { get; set; } = new();
    private ReviewViewModel NewReview { get; set; } = new();
    private bool showForm = false;
    private bool isLoading = true;

    protected override async Task OnInitializedAsync()
    {
        await LoadReviews();
    }

    private async Task LoadReviews()
    {
        try
        {
            isLoading = true;
            Reviews = await Http.GetFromJsonAsync<List<ReviewViewModel>>($"https://localhost:7037/api/reviews?productId={ProductId}") ?? new();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading reviews: {ex.Message}");
            Reviews = new();
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task HandleSubmit()
    {
        try
        {
            // NewReview.ProductId = ProductId;

            // var response = await Http.PostAsJsonAsync("https://localhost:7037/api/reviews", NewReview);
            // if (response.IsSuccessStatusCode)
            // {
            //     var addedReview = await response.Content.ReadFromJsonAsync<Review>();
            //     if (addedReview != null)
            //     {
            //         Reviews.Insert(0, addedReview);
            //         NewReview = new Review();
            //         showForm = false;
            //     }
            // }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Failed to submit review: {ex.Message}");
        }
    }
}