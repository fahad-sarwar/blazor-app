@page "/checkout"

@using OnlineShopUI.ViewModels
@using OnlineShopUI.Services
@rendermode InteractiveServer
@inject HttpClient HttpClient
@inject NavigationManager Navigation
@inject BasketService BasketService

<h3>Checkout</h3>

@if (_errorMessage != null)
{
    <div class="alert alert-danger">@_errorMessage</div>
}

@if (!_loaded)
{
    <p>Loading basket...</p>
}
else if (_basket == null || !_basket.Items.Any())
{
    <div class="alert alert-warning">Your basket is empty.</div>
}
else
{
    <div class="row g-5">
        <div class="col-md-7">
            <EditForm Model="@_checkoutModel" OnValidSubmit="SubmitOrder">
                <DataAnnotationsValidator />
                <ValidationSummary />

                <div class="accordion" id="checkoutAccordion">
                    <!-- Step 1: Customer Details -->
                    <div class="accordion-item">
                        <h2 class="accordion-header" id="headingOne">
                            <button class="accordion-button @(!_isCustomerValid ? "" : "collapsed text-success")" type="button"
                                    data-bs-toggle="collapse" data-bs-target="#collapseOne">
                                Step 1: Customer Details
                            </button>
                        </h2>
                        <div id="collapseOne" class="accordion-collapse collapse @(_activeStep == 1 ? "show" : "")"
                             data-bs-parent="#checkoutAccordion">
                            <div class="accordion-body">
                                <InputText class="form-control mb-3" @bind-Value="_checkoutModel.FirstName" placeholder="First Name" />
                                <InputText class="form-control mb-3" @bind-Value="_checkoutModel.LastName" placeholder="Last Name" />
                                <InputText class="form-control mb-3" @bind-Value="_checkoutModel.Email" placeholder="Email" />
                                <InputText class="form-control mb-3" @bind-Value="_checkoutModel.PhoneNumber" placeholder="Phone Number" />
                                <button type="button" class="btn btn-primary" @onclick="ValidateCustomer">Save & Continue</button>
                            </div>
                        </div>
                    </div>

                    <!-- Step 2: Billing Address -->
                    <div class="accordion-item">
                        <h2 class="accordion-header" id="headingTwo">
                            <button class="accordion-button @(_activeStep == 2 ? "" : "collapsed text-success")" type="button"
                                    data-bs-toggle="collapse" data-bs-target="#collapseTwo">
                                Step 2: Billing Address
                            </button>
                        </h2>
                        <div id="collapseTwo" class="accordion-collapse collapse @(_activeStep == 2 ? "show" : "")"
                             data-bs-parent="#checkoutAccordion">
                            <div class="accordion-body">
                                <InputText class="form-control mb-3" @bind-Value="_checkoutModel.BillingAddressLineOne" placeholder="Address Line 1" />
                                <InputText class="form-control mb-3" @bind-Value="_checkoutModel.BillingTown" placeholder="Town" />
                                <InputText class="form-control mb-3" @bind-Value="_checkoutModel.BillingPostCode" placeholder="Postcode" />
                                <InputText class="form-control mb-3" @bind-Value="_checkoutModel.BillingCountry" placeholder="Country" />
                                <button type="button" class="btn btn-primary" @onclick="ValidateBilling">Save & Continue</button>
                            </div>
                        </div>
                    </div>

                    <!-- Step 3: Shipping Address -->
                    <div class="accordion-item">
                        <h2 class="accordion-header" id="headingThree">
                            <button class="accordion-button @(_activeStep == 3 ? "" : "collapsed text-success")" type="button"
                                    data-bs-toggle="collapse" data-bs-target="#collapseThree">
                                Step 3: Shipping Address
                            </button>
                        </h2>
                        <div id="collapseThree" class="accordion-collapse collapse @(_activeStep == 3 ? "show" : "")"
                             data-bs-parent="#checkoutAccordion">
                            <div class="accordion-body">
                                <InputText class="form-control mb-3" @bind-Value="_checkoutModel.ShippingAddressLineOne" placeholder="Address Line 1" />
                                <InputText class="form-control mb-3" @bind-Value="_checkoutModel.ShippingTown" placeholder="Town" />
                                <InputText class="form-control mb-3" @bind-Value="_checkoutModel.ShippingPostCode" placeholder="Postcode" />
                                <InputText class="form-control mb-3" @bind-Value="_checkoutModel.ShippingCountry" placeholder="Country" />
                                <button type="button" class="btn btn-primary" @onclick="ValidateShipping">Save & Continue</button>
                            </div>
                        </div>
                    </div>

                    <!-- Step 4: Payment Details -->
                    <div class="accordion-item">
                        <h2 class="accordion-header" id="headingFour">
                            <button class="accordion-button @(_activeStep == 4 ? "" : "collapsed text-success")" type="button"
                                    data-bs-toggle="collapse" data-bs-target="#collapseFour">
                                Step 4: Payment Details
                            </button>
                        </h2>
                        <div id="collapseFour" class="accordion-collapse collapse @(_activeStep == 4 ? "show" : "")"
                             data-bs-parent="#checkoutAccordion">
                            <div class="accordion-body">
                                <InputText class="form-control mb-3" @bind-Value="_checkoutModel.CardNumber" placeholder="Card Number" />
                                <InputText class="form-control mb-3" @bind-Value="_checkoutModel.CardName" placeholder="Name on Card" />
                                <div class="row g-2">
                                    <div class="col-md-6">
                                        <InputText class="form-control" @bind-Value="_checkoutModel.Expiry" placeholder="MM/YY" />
                                    </div>
                                    <div class="col-md-6">
                                        <InputText class="form-control" @bind-Value="_checkoutModel.CVV" placeholder="CVV" />
                                    </div>
                                </div>
                                <button type="submit" class="btn btn-success mt-3">Place Order</button>
                            </div>
                        </div>
                    </div>
                </div>
            </EditForm>
        </div>

        <div class="col-md-5">
            @* Order Summary Code Unchanged *@
        </div>
    </div>
}

@code {
    private BasketViewModel? _basket;
    private bool _loaded;
    private string? _errorMessage;

    private CheckoutViewModel _checkoutModel = new();

    private int _activeStep = 1;

    private bool _isCustomerValid = false;
    private bool _isBillingValid = false;
    private bool _isShippingValid = false;
    private bool _isPaymentValid = false;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await LoadBasketAsync();
            CreateDummyCheckoutModel();
        }
    }

    private void CreateDummyCheckoutModel()
    {

        _checkoutModel = new CheckoutViewModel
            {
                FirstName = "Joe",
                LastName = "Bloggs",
                Email = "joe@email.com",
                PhoneNumber = "01234567890",
                BillingAddressLineOne = "123 Main St",
                BillingTown = "London",
                BillingCounty = "Greater London",
                BillingPostCode = "E1 6AN",
                ShippingAddressLineOne = "123 Main St",
                ShippingTown = "London",
                ShippingCounty = "Greater London",
                ShippingPostCode = "E1 6AN",
                CardName = "Joe Bloggs",
                CardNumber = "4111111111111111", // Test card number
                Expiry = "12/25",
                CVV = "123",
            }
        ;
    }

    private async Task LoadBasketAsync()
    {
        try
        {
            _basket = await BasketService.GetBasket();
            _errorMessage = null;
        }
        catch (Exception ex)
        {
            _errorMessage = "Failed to load basket.";
            _basket = new BasketViewModel();
        }

        _loaded = true;
        StateHasChanged();
    }

    private void ValidateCustomer()
    {
        _isCustomerValid = !string.IsNullOrWhiteSpace(_checkoutModel.FirstName)
                          && !string.IsNullOrWhiteSpace(_checkoutModel.LastName)
                          && !string.IsNullOrWhiteSpace(_checkoutModel.Email)
                          && !string.IsNullOrWhiteSpace(_checkoutModel.PhoneNumber);

        if (_isCustomerValid)
            _activeStep = 2;
    }

    private void ValidateBilling()
    {
        _isBillingValid = !string.IsNullOrWhiteSpace(_checkoutModel.BillingAddressLineOne)
                         && !string.IsNullOrWhiteSpace(_checkoutModel.BillingTown)
                         && !string.IsNullOrWhiteSpace(_checkoutModel.BillingPostCode)
                         && !string.IsNullOrWhiteSpace(_checkoutModel.BillingCountry);

        if (_isBillingValid)
            _activeStep = 3;
    }

    private void ValidateShipping()
    {
        _isShippingValid = !string.IsNullOrWhiteSpace(_checkoutModel.ShippingAddressLineOne)
                          && !string.IsNullOrWhiteSpace(_checkoutModel.ShippingTown)
                          && !string.IsNullOrWhiteSpace(_checkoutModel.ShippingPostCode)
                          && !string.IsNullOrWhiteSpace(_checkoutModel.ShippingCountry);

        if (_isShippingValid)
            _activeStep = 4;
    }

    private async Task SubmitOrder()
    {
        try
        {
            var orderRequest = new CreateOrderRequest
                {
                    Customer = new CustomerViewModel
                    {
                        FirstName = _checkoutModel.FirstName,
                        LastName = _checkoutModel.LastName,
                        Email = _checkoutModel.Email,
                        PhoneNumber = _checkoutModel.PhoneNumber,
                        BillingAddress = new AddressViewModel
                        {
                            AddressLineOne = _checkoutModel.BillingAddressLineOne,
                            AddressLineTwo = _checkoutModel.BillingAddressLineTwo,
                            Town = _checkoutModel.BillingTown,
                            County = _checkoutModel.BillingCounty,
                            PostCode = _checkoutModel.BillingPostCode,
                            Country = _checkoutModel.BillingCountry
                        },
                        ShippingAddress = new AddressViewModel
                        {
                            AddressLineOne = _checkoutModel.ShippingAddressLineOne,
                            AddressLineTwo = _checkoutModel.ShippingAddressLineTwo,
                            Town = _checkoutModel.ShippingTown,
                            County = _checkoutModel.ShippingCounty,
                            PostCode = _checkoutModel.ShippingPostCode,
                            Country = _checkoutModel.ShippingCountry
                        }
                    },
                    BasketId = _basket!.Id,
                    Payment = new PaymentDetails
                    {
                        CardNumber = _checkoutModel.CardNumber,
                        CardName = _checkoutModel.CardName,
                        Expiry = _checkoutModel.Expiry,
                        CVV = _checkoutModel.CVV
                    }
                };

            var response = await HttpClient.PostAsJsonAsync($"http://localhost:5110/api/Orders", orderRequest);

            if (response.IsSuccessStatusCode)
            {
                var orderResponse = await response.Content.ReadFromJsonAsync<OrderViewModel>();
                Navigation.NavigateTo($"/order-confirmation/{orderResponse.Id}");
            }
            else
            {
                _errorMessage = "Failed to place order.";
            }
        }
        catch
        {
            _errorMessage = "Unexpected error during order placement.";
        }
    }
}