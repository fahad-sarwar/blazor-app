@page "/"
@using OnlineShopUI.Components.Shared
@using OnlineShopUI.ViewModels
@inject HttpClient HttpClient
@rendermode InteractiveServer

<style>
    .carousel-inner {
    height: 400px;
    }

    .carousel-item img {
    height: 100%;
    object-fit: cover;
    width: 100%;
    }
</style>

<div id="carouselExampleIndicators" class="carousel slide mb-5" data-bs-ride="carousel">
    <div class="carousel-indicators">
        <button type="button" data-bs-target="#carouselExampleIndicators" data-bs-slide-to="0" class="active" aria-current="true" aria-label="Slide 1"></button>
        <button type="button" data-bs-target="#carouselExampleIndicators" data-bs-slide-to="1" aria-label="Slide 2"></button>
        <button type="button" data-bs-target="#carouselExampleIndicators" data-bs-slide-to="2" aria-label="Slide 3"></button>
    </div>
    <div class="carousel-inner">
        <div class="carousel-item active">
            <img src="/images/CarouselImageOne.png" class="d-block w-100" alt="...">
        </div>
        <div class="carousel-item">
            <img src="/images/CarouselImageTwo.png" class="d-block w-100" alt="...">
        </div>
        <div class="carousel-item">
            <img src="/images/CarouselImageThree.png" class="d-block w-100" alt="...">
        </div>
    </div>
    <button class="carousel-control-prev" type="button" data-bs-target="#carouselExampleIndicators" data-bs-slide="prev">
        <span class="carousel-control-prev-icon" aria-hidden="true"></span>
        <span class="visually-hidden">Previous</span>
    </button>
    <button class="carousel-control-next" type="button" data-bs-target="#carouselExampleIndicators" data-bs-slide="next">
        <span class="carousel-control-next-icon" aria-hidden="true"></span>
        <span class="visually-hidden">Next</span>
    </button>
</div>

@if (products == null)
{
    <p>Loading...</p>
}

@if (products is not null && products.Any())
{
    <h3>Sale Items</h3>

    <div class="row row-cols-1 row-cols-md-3 g-4">
        @foreach (var product in products)
        {
            <ProductSummaryItem Product="product" />
        }
    </div>
}

@code {
    private List<ProductViewModel> products = new();
    private string selectedSort = "name-asc";

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var pagedProductResult = await HttpClient.GetFromJsonAsync<PagedProductResultViewModel>(
                $"http://localhost:5110/api/products?forSale=true&sort={selectedSort}&page={1}&pageSize={6}");

            products.AddRange(pagedProductResult.Products);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error fetching products on sale : {ex.Message}");
            products = new List<ProductViewModel>();
        }
    }
}