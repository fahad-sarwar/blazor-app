@page "/product/{Id:int}"

@using OnlineShopUI.Components.Shared
@using OnlineShopUI.Services
@using OnlineShopUI.ViewModels
@using System.Text.Json
@inject HttpClient Http
@inject NavigationManager Navigation
@inject AnonymousUserService AnonymousUserService
@rendermode InteractiveServer

<h3>Product Details</h3>

@if (product == null)
{
	<p>Loading...</p>
}
else
{
	<div class="card mb-4">
		<div class="row g-0">
			<div class="col-md-4">
				<img src="@GetImageUrl(product)" class="img-fluid rounded-start" alt="@product.Name" />
			</div>
			<div class="col-md-8">
				<div class="card-body">
					<h5 class="card-title">@product.Name</h5>
					<p class="card-text">@product.Description</p>
					<p class="card-text"><strong>Price:</strong> £@product.Price.ToString("0.00")</p>

					<div class="d-flex gap-2 mt-4">
						<button class="btn btn-primary" @onclick="AddToBasket">Add to Basket</button>
						<button class="btn btn-outline-danger" @onclick="AddToWishlist">
							<i class="bi bi-heart"></i> Add to Wishlist
						</button>
					</div>
				</div>
			</div>
			<ProductReviews ProductId="@Id" />
		</div>
	</div>
}

@code {
	[Parameter] public int Id { get; set; }
	private ProductViewModel? product;

	protected override async Task OnInitializedAsync()
	{
		product = await Http.GetFromJsonAsync<ProductViewModel>($"http://localhost:5110/api/products/{Id}");
	}

	private string GetImageUrl(ProductViewModel p) =>
	!string.IsNullOrWhiteSpace(p.ImageURL) ? p.ImageURL : "https://via.placeholder.com/300x200?text=No+Image";

	private async Task AddToBasket()
	{
		var anonymousUserId = await AnonymousUserService.GetOrCreateAnonymousIdAsync();

		var basketItem = new
		{
			AnonymousId = anonymousUserId,
			ProductId = product.Id,
			Quantity = 1
		};

		var response = await Http.PostAsJsonAsync($"http://localhost:5110/api/BasketItems", basketItem);

		if (response.IsSuccessStatusCode)
		{
			Navigation.NavigateTo($"/basket");
		}
	}

	public int ProductId { get; set; }

	private async Task AddToWishlist()
	{
		var wishlist = await GetWishlistAsync();
		if (!wishlist.Contains(ProductId))
		{
			wishlist.Add(ProductId);
			await SaveWishlistAsync(wishlist);
		}
	}

	private async Task<List<int>> GetWishlistAsync()
	{
		var json = await JS.InvokeAsync<string>("localStorage.getItem", "wishlist");
		return string.IsNullOrEmpty(json) ? new List<int>() : JsonSerializer.Deserialize<List<int>>(json);
	}

	private async Task SaveWishlistAsync(List<int> wishlist)
	{
		var json = JsonSerializer.Serialize(wishlist);
		await JS.InvokeVoidAsync("localStorage.setItem", "wishlist", json);
	}

	[Inject] IJSRuntime JS { get; set; }
	

	// / private async Task SubmitReview()
	// // {
	// //     var response = await Http.PostAsJsonAsync($"http://localhost:5110/api/reviews", newReview);
	// //     if (response.IsSuccessStatusCode)
	// //     {
	// //         var addedReview = await response.Content.ReadFromJsonAsync<Review>();
	// //         product?.Reviews.Add(addedReview!);
	// //         newReview = new Review { ProductId = Id }; // reset form
	// //         StateHasChanged();
	// //     }
	// //     else
	// //     {
	// //         Console.WriteLine("Failed to submit review.");
	// //     }
	// // }
}